<Window x:Class="M008.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
		xmlns:sys="clr-namespace:System;assembly=System.Runtime"
		xmlns:local="clr-namespace:M008"
		DataContext="{Binding RelativeSource={RelativeSource Self}}"
		WindowStartupLocation="CenterScreen"
		Topmost="True"
        Title="MainWindow" Height="450" Width="800">
    <StackPanel>
		<!--MarkupExtension-->
		<!--Gibt an die GUI (XAML) einen Wert weiter-->
		<!--Nimmt Werte von Punkt A und gibt diese in eine UI-Komponente (Punkt B) hinein-->
		
		<!--Beispiel: Enum an ComboBox binden-->
		<!--1. Möglichkeit: Liste im Backend-->
		<ComboBox ItemsSource="{Binding Wochentage}"/>
		<!--Problem: Bei großen Projekten wird das Backend mit Readonly-Listen zugemüllt-->
		
		<!--2. Möglichkeit: Eigene MarkupExtension-->
		<!--Aufgabe: Enumtyp empfangen, Enum auspacken, Werte in die ComboBox weitergeben-->
		<ComboBox ItemsSource="{local:Enum EnumType=sys:DayOfWeek}"/>
		<ComboBox ItemsSource="{local:Enum EnumType=local:FahrzeugMarke}"/>
		
		<!--Übung 7 durch MarkupExtension vereinfachen-->
		<ComboBox ItemsSource="{local:Colors}">
			<ComboBox.ItemTemplate>
				<DataTemplate>
					<StackPanel Orientation="Horizontal">
						<!--{Binding .}: Binding auf das Objekt selbst-->
						<Rectangle Width="20" Height="20" Fill="{Binding Brush}" Stroke="Black" StrokeThickness="1"/>
						<TextBlock Text="{Binding Name}" Margin="5, 0"/>
						<TextBlock Text="{Binding HexCode, StringFormat='({0})'}" Margin="5, 0"/>
					</StackPanel>
				</DataTemplate>
			</ComboBox.ItemTemplate>
		</ComboBox>
		
		<!--RelativeSource-->
		<!--Binding, bei dem im XAML die andere Komponente nicht klar ist (dynamische Bindung)-->
		<!--4 Modi: Self, TemplatedParent, FindAncestor, PreviousData-->
		
		<!--Self-->
		<Slider Minimum="10" Maximum="300" Value="10" Name="WSlider"/>
		<Rectangle Width="{Binding ElementName=WSlider, Path=Value}"
				   Height="{Binding RelativeSource={RelativeSource Self}, Path=Width}"
				   Fill="Aqua"
				   Stroke="Black"
				   StrokeThickness="2"/>
		
		<!--TemplatedParent-->
		<!--Andere Schreibweise für TemplateBinding-->
		<Button>
			<Button.Template>
				<ControlTemplate TargetType="Button">
					<!--BorderBrush == BorderThickness-->
					<Border BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=BorderThickness}"
							CornerRadius="10">
						<TextBlock Text="{TemplateBinding Content}" FontSize="{TemplateBinding FontSize}" TextAlignment="Center"/>
					</Border>
				</ControlTemplate>
			</Button.Template>
		</Button>
		
		<!--FindAncestor-->
		<!--Sucht nach einem UI-Element anhand eines Typens und Höhe (Anzahl)-->
		<Grid Background="Aqua">
			<Grid Background="Orange">
				<Grid Background="LightGreen">
					<Rectangle Width="100" Height="100"
							   Fill="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Grid, AncestorLevel=1}, Path=Background}"
							   Stroke="Black"/>
				</Grid>
			</Grid>
		</Grid>
		
		<!--PreviousData-->
		<!--Wird in Listenkomponenten verwendet, um auf das vorherige Item zuzugreifen-->
		<ListBox ItemsSource="{Binding Zahlen}">
			<ListBox.ItemTemplate>
				<DataTemplate>
					<TextBlock Text="{Binding RelativeSource={RelativeSource Mode=PreviousData}, Path=.}"/>
				</DataTemplate>
			</ListBox.ItemTemplate>
		</ListBox>
	</StackPanel>
</Window>
